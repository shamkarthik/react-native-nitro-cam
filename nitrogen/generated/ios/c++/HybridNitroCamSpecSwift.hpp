///
/// HybridNitroCamSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroCamSpec.hpp"

// Forward declaration of `HybridNitroCamSpec_cxx` to properly resolve imports.
namespace NitroCam { class HybridNitroCamSpec_cxx; }

// Forward declaration of `FlashMode` to properly resolve imports.
namespace margelo::nitro::nitrocam { enum class FlashMode; }

#include "FlashMode.hpp"

#include "NitroCam-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrocam {

  /**
   * The C++ part of HybridNitroCamSpec_cxx.swift.
   *
   * HybridNitroCamSpecSwift (C++) accesses HybridNitroCamSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroCamSpec_cxx can directly inherit from the C++ class HybridNitroCamSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroCamSpecSwift: public virtual HybridNitroCamSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroCamSpecSwift(const NitroCam::HybridNitroCamSpec_cxx& swiftPart):
      HybridObject(HybridNitroCamSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroCam::HybridNitroCamSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline bool getIsRed() noexcept override {
      return _swiftPart.isRed();
    }
    inline void setIsRed(bool isRed) noexcept override {
      _swiftPart.setIsRed(std::forward<decltype(isRed)>(isRed));
    }
    inline bool getIsFrontCamera() noexcept override {
      return _swiftPart.isFrontCamera();
    }
    inline void setIsFrontCamera(bool isFrontCamera) noexcept override {
      _swiftPart.setIsFrontCamera(std::forward<decltype(isFrontCamera)>(isFrontCamera));
    }
    inline FlashMode getFlash() noexcept override {
      auto __result = _swiftPart.getFlash();
      return static_cast<FlashMode>(__result);
    }
    inline void setFlash(FlashMode flash) noexcept override {
      _swiftPart.setFlash(static_cast<int>(flash));
    }
    inline double getZoom() noexcept override {
      return _swiftPart.getZoom();
    }
    inline void setZoom(double zoom) noexcept override {
      _swiftPart.setZoom(std::forward<decltype(zoom)>(zoom));
    }

  public:
    // Methods
    inline void switchCamera() override {
      auto __result = _swiftPart.switchCamera();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setFlashMode(FlashMode mode) override {
      auto __result = _swiftPart.setFlashMode(static_cast<int>(mode));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setZoomLevel(double level) override {
      auto __result = _swiftPart.setZoomLevel(std::forward<decltype(level)>(level));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroCam::HybridNitroCamSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrocam
