///
/// HybridNitroCamUtilSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroCamUtilSpec.hpp"

// Forward declaration of `HybridNitroCamUtilSpec_cxx` to properly resolve imports.
namespace NitroCam { class HybridNitroCamUtilSpec_cxx; }

// Forward declaration of `CameraType` to properly resolve imports.
namespace margelo::nitro::nitrocam { struct CameraType; }
// Forward declaration of `FocalType` to properly resolve imports.
namespace margelo::nitro::nitrocam { struct FocalType; }

#include <vector>
#include "CameraType.hpp"
#include <string>
#include "FocalType.hpp"

#include "NitroCam-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrocam {

  /**
   * The C++ part of HybridNitroCamUtilSpec_cxx.swift.
   *
   * HybridNitroCamUtilSpecSwift (C++) accesses HybridNitroCamUtilSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroCamUtilSpec_cxx can directly inherit from the C++ class HybridNitroCamUtilSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroCamUtilSpecSwift: public virtual HybridNitroCamUtilSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroCamUtilSpecSwift(const NitroCam::HybridNitroCamUtilSpec_cxx& swiftPart):
      HybridObject(HybridNitroCamUtilSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroCam::HybridNitroCamUtilSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::vector<CameraType> getCameraDevices() override {
      auto __result = _swiftPart.getCameraDevices();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroCam::HybridNitroCamUtilSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrocam
