///
/// HybridNitroCamSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroCamSpec``
public protocol HybridNitroCamSpec_protocol: HybridObject, HybridView {
  // Properties
  var isFrontCamera: Bool { get set }
  var flash: FlashMode { get set }
  var zoom: Double { get set }

  // Methods
  func switchCamera() throws -> Void
  func setFlashMode(mode: FlashMode) throws -> Void
  func setZoomLevel(level: Double) throws -> Void
  func takePhoto() throws -> String
}

/// See ``HybridNitroCamSpec``
public class HybridNitroCamSpec_base {
  private weak var cxxWrapper: HybridNitroCamSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroCamSpec_cxx {
  #if DEBUG
    guard self is HybridNitroCamSpec else {
      fatalError("`self` is not a `HybridNitroCamSpec`! Did you accidentally inherit from `HybridNitroCamSpec_base` instead of `HybridNitroCamSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroCamSpec_cxx(self as! HybridNitroCamSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroCam HybridObject.
 * Implement this protocol to create Swift-based instances of NitroCam.
 * ```swift
 * class HybridNitroCam : HybridNitroCamSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroCamSpec = HybridNitroCamSpec_protocol & HybridNitroCamSpec_base
