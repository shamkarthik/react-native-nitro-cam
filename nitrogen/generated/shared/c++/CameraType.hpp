///
/// CameraType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `FocalType` to properly resolve imports.
namespace margelo::nitro::nitrocam { struct FocalType; }

#include <string>
#include <vector>
#include "FocalType.hpp"

namespace margelo::nitro::nitrocam {

  /**
   * A struct which can be represented as a JavaScript object (CameraType).
   */
  struct CameraType {
  public:
    std::string id     SWIFT_PRIVATE;
    std::string placement     SWIFT_PRIVATE;
    std::vector<FocalType> type     SWIFT_PRIVATE;

  public:
    CameraType() = default;
    explicit CameraType(std::string id, std::string placement, std::vector<FocalType> type): id(id), placement(placement), type(type) {}
  };

} // namespace margelo::nitro::nitrocam

namespace margelo::nitro {

  using namespace margelo::nitro::nitrocam;

  // C++ CameraType <> JS CameraType (object)
  template <>
  struct JSIConverter<CameraType> final {
    static inline CameraType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return CameraType(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "id")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "placement")),
        JSIConverter<std::vector<FocalType>>::fromJSI(runtime, obj.getProperty(runtime, "type"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const CameraType& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "id", JSIConverter<std::string>::toJSI(runtime, arg.id));
      obj.setProperty(runtime, "placement", JSIConverter<std::string>::toJSI(runtime, arg.placement));
      obj.setProperty(runtime, "type", JSIConverter<std::vector<FocalType>>::toJSI(runtime, arg.type));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "id"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "placement"))) return false;
      if (!JSIConverter<std::vector<FocalType>>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
