///
/// JHybridNitroCamSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroCamSpec.hpp"

// Forward declaration of `FlashMode` to properly resolve imports.
namespace margelo::nitro::nitrocam { enum class FlashMode; }

#include "FlashMode.hpp"
#include "JFlashMode.hpp"

namespace margelo::nitro::nitrocam {

  jni::local_ref<JHybridNitroCamSpec::jhybriddata> JHybridNitroCamSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroCamSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroCamSpec::initHybrid),
    });
  }

  size_t JHybridNitroCamSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  bool JHybridNitroCamSpec::getIsRed() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("isRed");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridNitroCamSpec::setIsRed(bool isRed) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* isRed */)>("setRed");
    method(_javaPart, isRed);
  }
  bool JHybridNitroCamSpec::getIsFrontCamera() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("isFrontCamera");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridNitroCamSpec::setIsFrontCamera(bool isFrontCamera) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* isFrontCamera */)>("setFrontCamera");
    method(_javaPart, isFrontCamera);
  }
  FlashMode JHybridNitroCamSpec::getFlash() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFlashMode>()>("getFlash");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  void JHybridNitroCamSpec::setFlash(FlashMode flash) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFlashMode> /* flash */)>("setFlash");
    method(_javaPart, JFlashMode::fromCpp(flash));
  }
  double JHybridNitroCamSpec::getZoom() {
    static const auto method = javaClassStatic()->getMethod<double()>("getZoom");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridNitroCamSpec::setZoom(double zoom) {
    static const auto method = javaClassStatic()->getMethod<void(double /* zoom */)>("setZoom");
    method(_javaPart, zoom);
  }

  // Methods
  void JHybridNitroCamSpec::switchCamera() {
    static const auto method = javaClassStatic()->getMethod<void()>("switchCamera");
    method(_javaPart);
  }
  void JHybridNitroCamSpec::setFlashMode(FlashMode mode) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFlashMode> /* mode */)>("setFlashMode");
    method(_javaPart, JFlashMode::fromCpp(mode));
  }
  void JHybridNitroCamSpec::setZoomLevel(double level) {
    static const auto method = javaClassStatic()->getMethod<void(double /* level */)>("setZoomLevel");
    method(_javaPart, level);
  }

} // namespace margelo::nitro::nitrocam
