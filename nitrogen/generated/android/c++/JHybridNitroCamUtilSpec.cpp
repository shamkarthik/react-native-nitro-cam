///
/// JHybridNitroCamUtilSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroCamUtilSpec.hpp"

// Forward declaration of `CameraType` to properly resolve imports.
namespace margelo::nitro::nitrocam { struct CameraType; }
// Forward declaration of `FocalType` to properly resolve imports.
namespace margelo::nitro::nitrocam { struct FocalType; }

#include <vector>
#include "CameraType.hpp"
#include "JCameraType.hpp"
#include <string>
#include "FocalType.hpp"
#include "JFocalType.hpp"

namespace margelo::nitro::nitrocam {

  jni::local_ref<JHybridNitroCamUtilSpec::jhybriddata> JHybridNitroCamUtilSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroCamUtilSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroCamUtilSpec::initHybrid),
    });
  }

  size_t JHybridNitroCamUtilSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::vector<CameraType> JHybridNitroCamUtilSpec::getCameraDevices() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JArrayClass<JCameraType>>()>("getCameraDevices");
    auto __result = method(_javaPart);
    return [&]() {
      size_t __size = __result->size();
      std::vector<CameraType> __vector;
      __vector.reserve(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        auto __element = __result->getElement(__i);
        __vector.push_back(__element->toCpp());
      }
      return __vector;
    }();
  }

} // namespace margelo::nitro::nitrocam
