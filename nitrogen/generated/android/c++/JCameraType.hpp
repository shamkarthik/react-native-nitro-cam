///
/// JCameraType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "CameraType.hpp"

#include "FocalType.hpp"
#include "JFocalType.hpp"
#include <string>
#include <vector>

namespace margelo::nitro::nitrocam {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "CameraType" and the the Kotlin data class "CameraType".
   */
  struct JCameraType final: public jni::JavaClass<JCameraType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrocam/CameraType;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct CameraType by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    CameraType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldId = clazz->getField<jni::JString>("id");
      jni::local_ref<jni::JString> id = this->getFieldValue(fieldId);
      static const auto fieldPlacement = clazz->getField<jni::JString>("placement");
      jni::local_ref<jni::JString> placement = this->getFieldValue(fieldPlacement);
      static const auto fieldType = clazz->getField<jni::JArrayClass<JFocalType>>("type");
      jni::local_ref<jni::JArrayClass<JFocalType>> type = this->getFieldValue(fieldType);
      return CameraType(
        id->toStdString(),
        placement->toStdString(),
        [&]() {
          size_t __size = type->size();
          std::vector<FocalType> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = type->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JCameraType::javaobject> fromCpp(const CameraType& value) {
      return newInstance(
        jni::make_jstring(value.id),
        jni::make_jstring(value.placement),
        [&]() {
          size_t __size = value.type.size();
          jni::local_ref<jni::JArrayClass<JFocalType>> __array = jni::JArrayClass<JFocalType>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.type[__i];
            __array->setElement(__i, *JFocalType::fromCpp(__element));
          }
          return __array;
        }()
      );
    }
  };

} // namespace margelo::nitro::nitrocam
