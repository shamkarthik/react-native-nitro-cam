///
/// JFocalType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "FocalType.hpp"

#include <string>

namespace margelo::nitro::nitrocam {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "FocalType" and the the Kotlin data class "FocalType".
   */
  struct JFocalType final: public jni::JavaClass<JFocalType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrocam/FocalType;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct FocalType by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    FocalType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldId = clazz->getField<jni::JString>("id");
      jni::local_ref<jni::JString> id = this->getFieldValue(fieldId);
      static const auto fieldName = clazz->getField<jni::JString>("name");
      jni::local_ref<jni::JString> name = this->getFieldValue(fieldName);
      static const auto fieldFocalLength = clazz->getField<double>("focalLength");
      double focalLength = this->getFieldValue(fieldFocalLength);
      return FocalType(
        id->toStdString(),
        name->toStdString(),
        focalLength
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JFocalType::javaobject> fromCpp(const FocalType& value) {
      return newInstance(
        jni::make_jstring(value.id),
        jni::make_jstring(value.name),
        value.focalLength
      );
    }
  };

} // namespace margelo::nitro::nitrocam
